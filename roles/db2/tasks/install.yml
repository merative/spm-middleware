---
- name: Create temporary directory
  file:
    path: /tmp/db2/
    recurse: yes
    mode: 0755
    state: directory
  register: tmp_dir

- name: Copy installer
  copy:
    src: "{{ db2_installer_path }}"
    dest: "{{ tmp_dir.path }}/db2_installer.tar.gz"
  when: download_url is not defined
  register: db2_installer

- name: Download installer
  get_url:
    url: "{{ download_url }}/{{ db2_installer_path }}"
    dest: "{{ tmp_dir.path }}/db2_installer.tar.gz"
    headers: "{{ download_header }}"
  when: download_url is defined
  register: db2_installer

- name: Create tmp directory
  file:
    path: /tmp/DB2Installer
    state: directory
  register: installer_dir

- name: Extract installer
  unarchive:
    src: "{{ db2_installer.dest }}"
    dest: "{{ installer_dir.path }}"
    remote_src: yes
    extra_opts:
      - --strip-components=1
  when: db2_installer.changed

- name: Check prereqs
  command: "{{ installer_dir.path }}/db2prereqcheck -i -v {{ db2_version }}"
  when:
    - not db2_bypass_prereq_check
    - db2_installer.changed

- name: Render response file
  template:
    src: db2server.rsp.j2
    dest: "{{ installer_dir.path }}/db2server.rsp"
    mode: 0644

- name: Create groups
  group:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ db2_db_groupname }}"
    - dasadm1
    - "{{ db2_fenced_groupname }}"

- name: Create users
  user:
    name: "{{ item.name }}"
    group: "{{ item.group }}"
    password: "{{ db2_db_password | password_hash('sha512', 'SaltyCl0ud') }}"
    expires: -1
    create_home: yes
    state: present
  loop:
    - { group: "{{ db2_db_groupname }}", name: "{{ db2_db_username }}" }
    - { group: dasadm1, name: dasusr1 }
    - { group: "{{ db2_fenced_groupname }}", name: "{{ db2_fenced_username }}" }

- name: Run installer
  command: "{{ installer_dir.path }}/db2setup -r {{ installer_dir.path }}/db2server.rsp"
  register: install_job
  async: 1800
  poll: 0

# Workaround for Rocky where aws libs not in path

- name: Wait for DB2 libs to be extracted
  pause:
    seconds: 120
  when: ansible_facts['distribution'] == "Rocky"

- name: Gather system facts
  ansible.builtin.setup:
  when: ansible_facts['distribution'] == "Rocky"

- name: Get the version of the distribution
  debug:
    msg: "Rocky Linux version is {{ ansible_facts['distribution_version'] }}"
  when: ansible_facts['distribution'] == "Rocky"

- name: Check if AWS SDK libraries exist for RH 8
  stat:
    path: "/opt/IBM/db2/lib64/awssdk/RHEL/8.1/libaws-cpp-sdk-core.so"
  register: aws_lib_check
  when: ansible_facts['distribution'] == "Rocky" and ansible_facts['distribution_version'] is match('^8.*')

- name: Create missing symbolic links for AWS SDK libraries for RH 8
  file:
    src: "/opt/IBM/db2/lib64/awssdk/RHEL/8.1/{{ item }}"
    dest: "/opt/IBM/db2/lib64/{{ item }}"
    state: link
  loop:
    - libaws-cpp-sdk-core.so
    - libaws-cpp-sdk-kinesis.so
    - libaws-cpp-sdk-s3.so
    - libaws-cpp-sdk-transfer.so
  when: aws_lib_check.stat.exists and ansible_facts['distribution'] == "Rocky" and ansible_facts['distribution_version'] is match('^8.*')
  ignore_errors: true

- name: Check if AWS SDK libraries exist for RH 9
  stat:
    path: "/opt/IBM/db2/lib64/awssdk/RHEL/9.2/libaws-cpp-sdk-core.so"
  register: aws_lib_check
  when: ansible_facts['distribution'] == "Rocky" and ansible_facts['distribution_version'] is match('^9.*')

- name: Create missing symbolic links for AWS SDK libraries for RH 9
  file:
    src: "/opt/IBM/db2/lib64/awssdk/RHEL/9.2/{{ item }}"
    dest: "/opt/IBM/db2/lib64/{{ item }}"
    state: link
  loop:
    - libaws-cpp-sdk-core.so
    - libaws-cpp-sdk-kinesis.so
    - libaws-cpp-sdk-s3.so
    - libaws-cpp-sdk-transfer.so
  when: aws_lib_check.stat.exists and ansible_facts['distribution'] == "Rocky" and ansible_facts['distribution_version'] is match('^9.*')
  ignore_errors: true

# End Workaround for Rocky

- name: Check installer progress
  async_status:
    jid: "{{ install_job.ansible_job_id }}"
  until: install_result.finished
  register: install_result
  retries: 50
  delay: 30

- name: Cleanup
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ installer_dir.path }}"
    - "{{ db2_installer.dest }}"
